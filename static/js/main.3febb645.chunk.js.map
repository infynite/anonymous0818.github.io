{"version":3,"sources":["VoiceComponent.js","App.js","serviceWorker.js","index.js"],"names":["GreenCheckbox","withStyles","root","color","checked","props","Checkbox","GreenSwitch","switchBase","backgroundColor","track","Switch","decode","cb","source","converted","VoiceComponent","reverse","uttr_id","React","useState","checkedRhythm","checkedPitch","checkedTimbre","target","isReversed","state","setState","audio","useRef","audio1","audio2","handleChange","name","event","s","current","load","style","width","className","src","controls","ref","type","FormGroup","padding","row","FormControlLabel","control","onChange","value","label","App","id","margin","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3febb645.chunk.js","sourcesContent":["import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Switch from '@material-ui/core/Switch';\n\nimport './VoiceComponent.css';\n\nconst GreenCheckbox = withStyles({\n  root: {\n    color: 'rgb(50, 50, 50)',\n    '&$checked': {\n      color: 'rgb(88, 195, 194)',\n    },\n  },\n  checked: {},\n})(props => <Checkbox color=\"default\" {...props} />);\n\nconst GreenSwitch = withStyles({\n  switchBase: {\n    color: 'rgb(88, 195, 194)',\n    '&$checked': {\n      color: 'rgb(88, 195, 194)',\n    },\n    '&$checked + $track': {\n      backgroundColor: 'rgb(88, 195, 194)',\n    },\n  },\n  checked: {},\n  track: {},\n})(Switch);\n\nconst decode = (cb, source) => {\n  let converted = null;\n  switch (cb) {\n    case 'FFF':\n      converted = source + '_S';\n      break;\n    case 'TFF':\n      converted = source + '_R';\n      break;\n    case 'FTF':\n      converted = source + '_F';\n      break;\n    case 'FFT':\n      converted = source + '_U';\n      break;\n    case 'TTF':\n      converted = source + '_RF';\n      break;\n    case 'TFT':\n      converted = source + '_RU';\n      break;\n    case 'FTT':\n      converted = source + '_FU';\n      break;\n    case 'TTT':\n      converted = source + '_RFU';\n      break;\n  }\n  return converted;\n}\n\nfunction VoiceComponent(props) {\n  const {root, reverse, uttr_id} = props;\n  const [state, setState] = React.useState({\n    checkedRhythm: false,\n    checkedPitch: false,\n    checkedTimbre: false,\n    source: `${root}`,\n    target: `${reverse}`,\n    converted: `${root}_S`,\n    isReversed: false,\n  });\n  const audio = React.useRef();\n  const audio1 = React.useRef();\n  const audio2 = React.useRef();\n\n  const handleChange = name => event => {\n\n\n    const s = state;\n    state[name] = event.target.checked;\n    const source = !state.isReversed ? props.root : props.reverse;\n    const cb = ''  + (s.checkedRhythm ? 'T' : 'F') + (s.checkedPitch ? 'T' : 'F') + (s.checkedTimbre ? 'T' : 'F');\n\n    setState({ ...state, [name]: event.target.checked, converted: decode(cb, source) });\n    audio.current.load();\n  };\n  const handleSwitch = name => event => {\n\n\n    const s = state;\n    const source = !event.target.checked ? props.root : props.reverse;\n    const target = !event.target.checked ? props.reverse : props.root;\n    const cb = ''  + (s.checkedRhythm ? 'T' : 'F') + (s.checkedPitch ? 'T' : 'F') + (s.checkedTimbre ? 'T' : 'F');\n\n    setState({ ...state, isReversed: event.target.checked, converted: decode(cb, source), source, target });\n    audio1.current.load();\n    audio2.current.load();\n    audio.current.load();\n  };\n  return (\n    <div style={{ width: 1000 }}>\n      <p className=\"block-label\">Utterance {uttr_id}</p>\n      <div className=\"block\">\n      <p className=\"speech-label\">Source Speech</p>\n      <div className=\"voice-block\">\n        <div className=\"voice-block-img\">\n          <img src={`/spect/${state.source}_S.png`}/>\n        </div>\n        <div className=\"voice-block-wav\">\n        <audio controls ref={audio1}>\n          <source src={`/audio/${state.source}_S.wav`} type=\"audio/wav\" />\n\n          Your browser does not support the audio element.\n        </audio>\n        </div>\n      </div>\n\n      <p className=\"speech-label\">Target Speech</p>\n      <div className=\"voice-block\">\n        <div className=\"voice-block-img\">\n          <img src={`/spect/${state.target}_S.png`}/>\n        </div>\n        <div className=\"voice-block-wav\">\n        <audio controls ref={audio2}>\n          <source src={`/audio/${state.target}_S.wav`}  type=\"audio/wav\" />\n\n          Your browser does not support the audio element.\n        </audio>\n        </div>\n      </div>\n\n      <p className=\"speech-label\">Choose What To Convert:</p>\n\n      <FormGroup style={{ padding: '0 30px' }} row>\n      <FormControlLabel\n          control={\n            <GreenCheckbox\n              checked={state.checkedRhythm}\n              onChange={handleChange('checkedRhythm')}\n              value=\"checkedRhythm\"\n            />\n          }\n          label=\"Rhythm\"\n        />\n        <FormControlLabel\n          control={\n            <GreenCheckbox\n              checked={state.checkedPitch}\n              onChange={handleChange('checkedPitch')}\n              value=\"checkedPitch\"\n            />\n          }\n          label=\"Pitch\"\n        />\n        <FormControlLabel\n          control={\n            <GreenCheckbox\n              checked={state.checkedTimbre}\n              onChange={handleChange('checkedTimbre')}\n              value=\"checkedTimbre\"\n            />\n          }\n          label=\"Timbre\"\n        />\n        <FormControlLabel\n        control={\n          <GreenSwitch\n            checked={state.isReversed}\n            onChange={handleSwitch(null)}\n            value=\"checkedB\"\n          />\n        }\n        label=\"Switch source and target\"\n      />\n      </FormGroup>\n      <p className=\"speech-label\">Converted Speech</p>\n      <div className=\"voice-block\">\n        <div className=\"voice-block-img\">\n          <img src={`/spect/${state.converted}.png`}/>\n        </div>\n        <div className=\"voice-block-wav\">\n        <audio controls ref={audio}>\n          <source src={`/audio/${state.converted}.wav`}  type=\"audio/wav\" />\n\n          Your browser does not support the audio element.\n        </audio>\n        </div>\n      </div>\n\n    </div>\n    </div>\n    \n  );\n}\n\nexport default VoiceComponent;\n","import React from 'react';\nimport VoiceComponent from './VoiceComponent';\n\nimport './App.css';\n\n\nfunction App(props) {\n\n  return (\n    <div id='main'>\n      <div className=\"main-inner\">\n       \n        <h1>\n          Unsupervised Speech Decomposition Via Triple Information Bootleneck: \n          <font style={{color:\"#58c3c2\"}}> Audio Demo</font>\n        </h1>\n        <p>This demo webpage provides sound examples for <font style={{color:\"#58c3c2\"}}><b>SpeechFlow</b></font>, an autoencoder that can decompose speech into content, timbre, rhythm and pitch. The following GIF illustrates the structure of SpeechFlow.</p> \n        <p></p>\n        <div style={{ margin: '30px auto' }}>\n        <img src=\"spect/flow_plot.gif\" alt=\"animated\" width=\"800px\"/>\n        </div>\n\n        <p>Below are example audio clips of aspect-specific conversion result, which corresponds to section 5.2 in the paper. For each source-target pair, you can <font style={{color:\"#58c3c2\"}}><b>select the aspect(s) you wish to convert</b></font>, and the corresponding converted speech will automatically load.\n          You can also <font style={{color:\"#58c3c2\"}}><b>switch the source and target speech</b></font> by flipping the switch.\n        </p>\n        <VoiceComponent root=\"p225_p258_001\" reverse=\"p258_p225_001\" uttr_id=\"1\"/>\n        <VoiceComponent root=\"p225_p258_001\" reverse=\"p258_p225_001\" uttr_id=\"2\"/>\n        <VoiceComponent root=\"p225_p258_001\" reverse=\"p258_p225_001\" uttr_id=\"3\"/>\n        <VoiceComponent root=\"p225_p258_001\" reverse=\"p258_p225_001\" uttr_id=\"4\"/>\n        <VoiceComponent root=\"p225_p258_001\" reverse=\"p258_p225_001\" uttr_id=\"5\"/>\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('wrapper'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}